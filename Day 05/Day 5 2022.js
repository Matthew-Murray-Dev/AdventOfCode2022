let instructions = [[2, 4, 2], [6, 9, 7], [4, 7, 2], [2, 4, 1], [2, 6, 7], [1, 3, 8], [4, 7, 1], [2, 3, 2], [3, 8, 5], [3, 1, 4], [12, 2, 5], [2, 6, 8], [12, 5, 8], [3, 7, 9], [18, 8, 9], [2, 8, 6], [3, 2, 3], [14, 9, 4], [1, 1, 3], [7, 9, 3], [1, 2, 1], [8, 4, 5], [5, 6, 3], [2, 7, 9], [3, 4, 9], [4, 9, 6], [4, 6, 1], [8, 4, 6], [10, 1, 2], [13, 3, 2], [17, 5, 9], [2, 5, 1], [9, 9, 7], [1, 3, 6], [2, 1, 8], [11, 2, 4], [5, 6, 8], [1, 6, 3], [1, 1, 4], [3, 8, 6], [3, 2, 8], [9, 7, 9], [4, 4, 7], [1, 9, 5], [15, 9, 7], [7, 8, 3], [1, 5, 6], [2, 6, 9], [8, 2, 6], [3, 4, 3], [1, 2, 5], [4, 9, 3], [1, 3, 4], [13, 6, 2], [1, 5, 1], [4, 4, 9], [6, 3, 2], [11, 2, 7], [6, 3, 4], [3, 3, 2], [1, 3, 4], [1, 1, 3], [3, 9, 2], [1, 3, 1], [4, 7, 1], [1, 9, 5], [5, 1, 4], [11, 2, 4], [1, 5, 3], [1, 2, 3], [12, 4, 2], [2, 7, 2], [7, 4, 3], [5, 4, 1], [7, 7, 6], [4, 1, 8], [1, 8, 5], [8, 3, 2], [4, 7, 4], [13, 7, 1], [2, 8, 6], [5, 4, 9], [1, 3, 6], [1, 5, 8], [1, 2, 9], [4, 2, 6], [2, 8, 6], [10, 1, 3], [4, 9, 4], [2, 1, 3], [5, 2, 9], [4, 9, 2], [1, 1, 2], [13, 2, 4], [15, 4, 5], [3, 6, 8], [8, 3, 8], [1, 4, 2], [14, 5, 1], [1, 5, 4], [1, 4, 2], [8, 6, 7], [3, 6, 2], [2, 9, 1], [8, 8, 7], [9, 1, 5], [7, 5, 3], [14, 7, 9], [2, 2, 3], [7, 2, 1], [1, 6, 1], [4, 9, 2], [8, 3, 6], [2, 4, 3], [4, 3, 5], [5, 5, 7], [2, 6, 9], [6, 6, 2], [4, 2, 3], [1, 6, 2], [2, 7, 8], [13, 9, 5], [2, 7, 1], [14, 1, 5], [15, 5, 7], [3, 8, 7], [5, 3, 5], [6, 5, 7], [4, 1, 7], [1, 2, 5], [3, 2, 8], [11, 5, 2], [10, 7, 1], [1, 3, 4], [10, 2, 9], [1, 5, 8], [6, 7, 3], [1, 4, 6], [2, 3, 8], [1, 2, 1], [4, 3, 9], [3, 1, 6], [2, 7, 1], [1, 5, 6], [1, 3, 8], [4, 1, 4], [5, 2, 9], [3, 1, 4], [18, 9, 7], [4, 8, 4], [3, 1, 2], [1, 9, 7], [1, 4, 7], [1, 6, 2], [1, 2, 5], [25, 7, 3], [7, 4, 2], [8, 7, 9], [4, 8, 6], [1, 8, 5], [4, 6, 5], [2, 9, 5], [3, 5, 8], [4, 6, 4], [12, 3, 5], [11, 3, 2], [13, 5, 8], [4, 9, 6], [7, 4, 9], [2, 6, 2], [12, 2, 7], [1, 6, 3], [1, 5, 6], [2, 5, 3], [15, 8, 6], [4, 6, 7], [1, 5, 1], [10, 2, 8], [8, 8, 3], [8, 6, 8], [2, 7, 6], [9, 9, 7], [8, 8, 9], [1, 1, 3], [1, 2, 7], [7, 3, 1], [3, 8, 5], [3, 1, 6], [7, 9, 2], [2, 3, 7], [5, 7, 9], [17, 7, 5], [2, 7, 6], [10, 6, 3], [1, 1, 3], [6, 9, 3], [1, 2, 9], [2, 7, 9], [2, 9, 7], [1, 5, 8], [1, 8, 5], [6, 2, 5], [1, 6, 1], [5, 3, 5], [1, 6, 8], [1, 7, 9], [2, 9, 3], [15, 5, 2], [2, 1, 8], [2, 3, 7], [2, 8, 3], [3, 5, 9], [1, 8, 6], [1, 9, 6], [3, 7, 6], [17, 3, 4], [1, 1, 2], [6, 2, 9], [16, 4, 1], [4, 6, 8], [9, 5, 6], [8, 6, 2], [2, 9, 5], [2, 3, 5], [1, 6, 2], [1, 4, 8], [14, 1, 3], [8, 5, 3], [20, 3, 1], [1, 8, 2], [1, 9, 6], [1, 6, 7], [1, 7, 3], [22, 1, 2], [3, 3, 6], [27, 2, 8], [2, 2, 8], [2, 6, 9], [2, 9, 4], [2, 4, 8], [1, 1, 3], [14, 8, 5], [1, 3, 9], [3, 9, 2], [5, 2, 8], [10, 2, 9], [1, 6, 7], [1, 7, 5], [7, 5, 2], [2, 9, 2], [1, 6, 2], [2, 9, 5], [3, 5, 6], [6, 5, 3], [1, 5, 6], [4, 3, 9], [2, 9, 8], [3, 9, 5], [23, 8, 1], [2, 6, 1], [1, 5, 7], [2, 3, 5], [2, 9, 5], [4, 9, 7], [2, 9, 4], [1, 5, 4], [5, 8, 5], [2, 6, 2], [3, 7, 3], [1, 3, 4], [3, 2, 8], [4, 1, 6], [2, 6, 3], [4, 1, 2], [3, 8, 1], [13, 2, 5], [4, 3, 2], [14, 5, 7], [5, 2, 7], [18, 7, 9], [4, 4, 7], [2, 5, 4], [17, 9, 5], [1, 9, 1], [1, 7, 2], [5, 7, 2], [18, 1, 4], [1, 7, 3], [1, 3, 6], [2, 1, 3], [1, 6, 5], [2, 6, 8], [1, 8, 9], [1, 8, 3], [13, 4, 5], [1, 1, 6], [3, 2, 4], [1, 6, 1], [3, 2, 9], [3, 3, 1], [5, 4, 5], [30, 5, 3], [1, 4, 6], [1, 9, 8], [1, 9, 6], [21, 3, 7], [3, 1, 6], [1, 1, 4], [1, 9, 6], [1, 8, 2], [1, 3, 6], [1, 9, 3], [5, 4, 8], [1, 2, 4], [9, 5, 7], [2, 5, 9], [2, 8, 2], [2, 6, 3], [1, 4, 1], [4, 3, 8], [2, 9, 2], [4, 2, 6], [1, 1, 4], [2, 6, 9], [2, 5, 4], [1, 3, 1], [1, 1, 3], [2, 9, 1], [5, 3, 5], [1, 1, 8], [4, 6, 4], [5, 5, 6], [18, 7, 5], [1, 3, 4], [12, 7, 5], [15, 5, 6], [1, 5, 8], [1, 3, 7], [1, 1, 2], [1, 2, 4], [1, 7, 9], [2, 8, 2], [1, 2, 4], [4, 4, 2], [1, 2, 1], [1, 9, 8], [4, 6, 4], [3, 2, 6], [1, 2, 6], [8, 4, 3], [1, 1, 3], [6, 6, 1], [1, 3, 6], [5, 1, 7], [10, 5, 9], [3, 9, 8], [7, 6, 2], [1, 7, 8], [3, 5, 8], [3, 6, 2], [6, 8, 9], [1, 5, 3], [2, 3, 1], [2, 4, 8], [6, 6, 9], [1, 1, 4], [17, 9, 2], [1, 4, 1], [2, 7, 8], [1, 9, 8], [3, 8, 4], [3, 1, 4], [9, 8, 2], [1, 8, 4], [12, 2, 7], [4, 7, 4], [1, 8, 1], [10, 4, 2], [3, 3, 2], [1, 9, 7], [11, 7, 3], [1, 3, 1], [2, 3, 9], [1, 3, 7], [2, 1, 9], [1, 6, 5], [7, 3, 6], [1, 7, 3], [3, 3, 4], [1, 5, 7], [2, 4, 3], [2, 4, 8], [1, 7, 6], [2, 6, 8], [1, 9, 2], [1, 9, 5], [1, 5, 1], [1, 8, 6], [1, 3, 2], [4, 6, 1], [5, 1, 4], [11, 2, 4], [2, 8, 2], [1, 8, 9], [27, 2, 5], [4, 6, 3], [3, 2, 4], [2, 5, 9], [1, 5, 7], [2, 9, 5], [14, 4, 7], [2, 4, 7], [3, 4, 8], [4, 3, 1], [4, 1, 8], [2, 3, 9], [2, 9, 3], [7, 8, 9], [1, 3, 8], [2, 3, 2], [25, 5, 9], [1, 5, 8], [1, 8, 7], [26, 9, 1], [23, 1, 5], [7, 9, 7], [1, 9, 8], [1, 9, 2], [5, 7, 1], [20, 5, 6], [1, 7, 6], [2, 5, 3], [1, 8, 6], [21, 6, 8], [1, 6, 4], [1, 1, 7], [2, 1, 6], [1, 1, 3], [1, 2, 5], [1, 2, 6], [2, 7, 6], [6, 7, 9], [3, 1, 2], [17, 8, 1], [1, 4, 1], [2, 6, 9], [3, 8, 9], [2, 3, 7], [2, 9, 8], [4, 7, 3], [4, 3, 4], [2, 5, 8], [4, 8, 4], [3, 6, 8], [18, 1, 5], [1, 3, 4], [3, 2, 4], [5, 9, 1], [10, 7, 5], [5, 1, 3], [5, 3, 5], [5, 4, 3], [2, 4, 2], [5, 8, 3], [25, 5, 2], [3, 3, 6], [1, 1, 3], [3, 6, 7], [1, 4, 2], [1, 5, 8], [2, 4, 9], [1, 8, 1], [20, 2, 7], [10, 7, 1], [1, 1, 7], [4, 7, 8], [5, 5, 4], [4, 8, 6], [1, 1, 3], [5, 7, 4], [2, 1, 5], [4, 9, 1], [3, 2, 5], [5, 5, 1], [1, 9, 1], [11, 1, 3], [1, 6, 2], [7, 3, 5], [11, 3, 7], [1, 2, 6], [7, 7, 8], [1, 9, 1], [2, 3, 1], [1, 5, 3], [4, 1, 6], [4, 6, 3], [9, 4, 5], [2, 8, 2], [4, 6, 9], [3, 2, 4], [1, 8, 6]];

function movingBlocks() {
  let testArray = [['B', 'G', 'S', 'C'], ['T', 'M', 'W', 'H', 'J', 'N', 'V', 'G'], ['M', 'W', 'S'], ['B', 'S', 'L', 'T', 'W', 'N', 'M'], ['J', 'Z', 'F', 'T', 'V', 'G', 'W', 'P'], ['C', 'T', 'B', 'G', 'Q', 'H', 'S'], ['T', 'J', 'P', 'B', 'W'], ['G', 'D', 'C', 'Z', 'F', 'T', 'Q', 'M'], ['N', 'S', 'H', 'B', 'P', 'F']];
  let finalArray = [];
  let testVar;
  for (let i = 0; i < instructions.length; i++) {
    for (let j = instructions[i][0]; j > 0; j--) {
      testVar = testArray[(instructions[i][1] - 1)].splice((testArray[(instructions[i][1] - 1)].length - 1), 1);
      testArray[(instructions[i][2] - 1)].push(testVar[0]);
    }
  }
  for (let i = 0; i < testArray.length; i++) {
    finalArray.push(testArray[i][(testArray[i].length - 1)]);
  } return finalArray.join("");
}

console.log(movingBlocks());

function movingBlocks9001() {
  let testArray = [['B', 'G', 'S', 'C'], ['T', 'M', 'W', 'H', 'J', 'N', 'V', 'G'], ['M', 'W', 'S'], ['B', 'S', 'L', 'T', 'W', 'N', 'M'], ['J', 'Z', 'F', 'T', 'V', 'G', 'W', 'P'], ['C', 'T', 'B', 'G', 'Q', 'H', 'S'], ['T', 'J', 'P', 'B', 'W'], ['G', 'D', 'C', 'Z', 'F', 'T', 'Q', 'M'], ['N', 'S', 'H', 'B', 'P', 'F']];
  let finalArray = [];
  let testVar;
  for (let i = 0; i < instructions.length; i++) {
    testVar = testArray[(instructions[i][1] - 1)].splice((testArray[(instructions[i][1] - 1)].length - instructions[i][0]), instructions[i][0]);
    for (let j = 0; j < instructions[i][0]; j++) {
      testArray[(instructions[i][2] - 1)].push(testVar[j]);
    }
  }
  for (let i = 0; i < testArray.length; i++) {
    finalArray.push(testArray[i][(testArray[i].length - 1)]);
  }
  return finalArray.join("");
}

console.log(movingBlocks9001());